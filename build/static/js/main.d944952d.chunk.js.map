{"version":3,"sources":["Converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","state","amount","from","to","converted","error","handleInputChange","e","target","value","test","setState","getValue","handleFromChange","handleToChange","z","amtCadtoUsd","cadToUsd","toFixed","amtUsdtoCad","usdToCad","amtCadtoEur","cadToEuro","amtEurtoCad","euroToCad","amtEurotoUsd","euroToUsd","amtUsdtoEuro","usdToEuro","console","log","today","Date","date","getDate","day","getUTCDay","latestDay","month","getMonth","length","formatted","getFullYear","fetch","then","res","json","result","observations","FXUSDCAD","v","w","catch","FXEURCAD","u","autoFocus","ref","input","focus","name","onChange","this","aria-label","readOnly","className","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d944952d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Converter extends Component {\n  state={\n    amount : '',\n    from: 'CAD',\n    to: 'USD',\n    converted: '',\n    error: false    \n  }\n  \n  componentDidMount() { \n    const today = new Date()\n    let date = today.getDate()\n    const day = today.getUTCDay() \n    console.log(day)\n    let sundays = day === 0 && day !== 6 ? date - 2 : day\n    let saturdays = day === 6 && day !== 0 ? date - 1 : day\n    let weekend = day === 0 ? sundays : saturdays;\n    let latestDay = day === 0 || day === 1 ? weekend : day\n\n    console.log(latestDay)\n    const month = (today.getMonth() + 1).length > 1 ? (today.getMonth() + 1) : \"0\" + (today.getMonth() + 1);\n    const formatted = today.getFullYear() + \"-\" + month + \"-\" +  latestDay\n    \n\n    fetch(`https://www.bankofcanada.ca/valet/observations/FXUSDCAD/json?start_date=${formatted}&end_date=${formatted}`, {             \n    })\n    .then(res => res.json())\n    .then(result => {      \n      console.log(result)\n      this.setState({\n        usdToCad: result.observations[0].FXUSDCAD.v               \n      })\n    \n    })\n    .then(() => { \n      const w = 1 / this.state.usdToCad\n      console.log(w)\n      this.setState({\n        cadToUsd: w\n      })\n    })\n    .catch(error => console.error('Error', error))\n    \n    fetch(`https://www.bankofcanada.ca/valet/observations/FXEURCAD/json?start_date=${formatted}&end_date=${formatted}`, {             \n    })\n    .then(res => res.json())\n    .then(result => {      \n      console.log(result)\n      this.setState({\n        euroToCad: result.observations[0].FXEURCAD.v               \n      })\n    \n    })\n    .then(() => { \n      const w = 1 / this.state.euroToCad\n      const u = this.state.usdToCad / this.state.euroToCad\n      const e = this.state.euroToCad / this.state.usdToCad\n      console.log(w)\n      this.setState({\n        cadToEuro: w,\n        usdToEuro: u,\n        euroToUsd: e\n      })\n    })\n    .catch(error => console.error('Error', error))\n    // fetch(`http://data.fixer.io/api/latest?access_key=aa139048e9c95de99e9b37afc4acdf15&symbols=USD,CAD`, {\n    // })\n    // .then(res => res.json())\n    // .then(result => {      \n    //   this.setState({\n    //     euroToUsd: result.rates.USD,\n    //     euroToCad: result.rates.CAD,        \n    //   }) \n    // })\n    // .then(() => {\n    //   const w = 1 / this.state.euroToCad\n    //   const x = this.state.euroToUsd / this.state.euroToCad\n    //   const y = this.state.euroToCad / this.state.euroToUsd\n    //   const z = 1 / this.state.euroToUsd\n      \n    //   this.setState({ \n    //     cadToEuro: w,\n    //     cadToUsd: x,\n    //     usdToCad: y,\n    //     usdToEuro: z\n    //   })\n    // })    \n    // .catch(error => console.error('Error', error))\n  }\n\n  handleInputChange = e => {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === '' || re.test(e.target.value)) {\n      this.setState({ amount: e.target.value })        \n      this.getValue( e.target.value)\n    }\n  }\n\n  handleFromChange = e => {\n    this.setState({ \n      from: e.target.value,\n      amount: '',  \n      converted: '',\n      error: false\n    })    \n  }\n\n  handleToChange = e => {    \n    this.setState({ \n      to: e.target.value ,\n      amount: '',\n      converted: '',\n      error: false    \n    })                \n  }\n\n  getValue = (e) => {                \n    const z = this.state;    \n    const { from, to } = z\n    const req = from+to\n\n    switch(req) {\n      case 'CADUSD':      \n        let amtCadtoUsd = z.cadToUsd * e;        \n        this.setState({ converted: amtCadtoUsd.toFixed(3) })\n        break\n      case 'USDCAD':      \n        let amtUsdtoCad = z.usdToCad * e;\n        this.setState({ converted: amtUsdtoCad.toFixed(3) })\n        break\n      case 'CADEUR':      \n        let amtCadtoEur = z.cadToEuro * e;\n        this.setState({ converted: amtCadtoEur.toFixed(3) })\n        break\n      case 'EURCAD':      \n        let amtEurtoCad = z.euroToCad * e;\n        this.setState({ converted: amtEurtoCad.toFixed(3) })\n        break\n      case 'EURUSD':\n        let amtEurotoUsd = z.euroToUsd * e;      \n        this.setState({ converted: amtEurotoUsd.toFixed(3) })\n        break\n      case 'USDEUR':\n        let amtUsdtoEuro = z.usdToEuro * e;      \n        this.setState({ converted: amtUsdtoEuro.toFixed(3) })\n        break      \n      case 'USDUSD': {             \n        this.setState({ converted: e })\n        break      \n      }\n      case 'CADCAD': {     \n        this.setState({ converted: e })\n        break      \n      }\n      case 'EUREUR': {     \n        this.setState({ converted: e })\n        break      \n      }\n      default :\n      console.log('banana')\n    }\n  }\n\n  render() {\n  return (\n    <section>      \n      <div>\n        <h1>Currency converter</h1>\n        <label> Type in amount and select currency: <br/>\n          <input \n            autoFocus\n            ref={input => input && input.focus()} \n            name=\"amount\"             \n            onChange={this.handleInputChange} \n            value={this.state.amount}\n            />\n        </label>\n        <label aria-label=\"Convert From\">\n          <select name=\"from\" value={this.state.from} onChange={this.handleFromChange}>\n            <option value='CAD' name='CAD'>CAD </option>\n            <option value='USD' name='USD'>USD </option>\n            <option value='EUR' name='EUR'>EUR </option>\n          </select>          \n        </label>\n      </div>\n\n      <div>\n        <label> Converted Amount <br/>\n          <input value={this.state.converted} readOnly/>\n        </label>\n        <label aria-label=\"Convert From\">\n        <select name=\"to\" value={this.state.to} onChange={this.handleToChange}>\n          <option value='CAD' name='CAD'>CAD </option>\n          <option value='USD' name='USD'>USD </option>\n          <option value='EUR' name='EUR'>EUR </option>\n        </select>\n        </label>\n      </div>\n\n      <br/><br/>\n      <p className=\"disclaimer\"><a href=\"https://fixer.io/faq\" target=\"_blank\">Disclaimer</a></p>\n    </section>\n  );\n}\n}\n\nexport default Converter;\n","import React from 'react';\nimport './App.css';\nimport Converter from './Converter';\n\nfunction App() {\n  return (\n    <Converter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}